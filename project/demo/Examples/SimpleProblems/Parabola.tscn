[gd_scene load_steps=4 format=3 uid="uid://c37yldhi151yx"]

[ext_resource type="SepCMAESParameters" uid="uid://uv5n53k65hmw" path="res://demo/Examples/FindObjective/sep_cma_es.tres" id="1_qnf4g"]
[ext_resource type="Script" path="res://demo/Examples/SimpleProblems/problems.gd" id="3_gc171"]

[sub_resource type="GDScript" id="GDScript_dib6d"]
script/source = "extends ProblemOptimizer

func _ready() -> void:
	start_training.call_deferred();

func _exit_tree() -> void:
	end_training();
	
func _input(event):
	if event is InputEventKey and event.is_pressed() and event.physical_keycode == KEY_ENTER:
		end_training();
"

[node name="Node" type="Node"]

[node name="ProblemOptimizer" type="ProblemOptimizer" parent="." node_paths=PackedStringArray("problem")]
problem = NodePath("OptimizableProblem")
population_size = 50
evolutionary_algorithm_parameters = ExtResource("1_qnf4g")
debug_verbose = true
termination_use_max_generation = true
termination_max_generation = 10000
script = SubResource("GDScript_dib6d")

[node name="OptimizableProblem" type="OptimizableProblem" parent="ProblemOptimizer"]
genome_size = 1000
script = ExtResource("3_gc171")
problem_type = 2

[connection signal="started" from="ProblemOptimizer/OptimizableProblem" to="ProblemOptimizer/OptimizableProblem" method="_on_started"]
