name: üõ†Ô∏è Builds
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - identifier: linux-debug-x86_64
            name: Linux Debug x86_64
            runner: ubuntu-22.04
            target: template_debug
            platform: linux
            arch: x86_64
          - identifier: linux-release-x86_64
            name: Linux Release x86_64
            runner: ubuntu-22.04
            target: template_release
            platform: linux
            arch: x86_64
          - identifier: windows-debug-x86_64
            name: Windows Debug x86_64
            runner: ubuntu-22.04
            target: template_debug
            platform: windows
            arch: x86_64
          - identifier: windows-release-x86_64
            name: Windows Release x86_64
            runner: ubuntu-22.04
            target: template_release
            platform: windows
            arch: x86_64
          - identifier: android-debug-arm64v8
            name: Android Debug arm64v8
            runner: ubuntu-22.04
            target: template_debug
            platform: android
            arch: arm64v8
          - identifier: android-release-arm64v8
            name: Android Release arm64v8
            runner: ubuntu-22.04
            target: template_release
            platform: android
            arch: arm64v8
    steps:
      - name: Set up tools
        steps:
          - name: (Windows) Install mingw64
            if: ${{ startsWith(matrix.identifier, 'windows-') }}
            shell: sh
            run: |
              sudo apt-get install -y mingw-w64
              sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
          - name: (Android) Set up Android environment
            if: ${{ startsWith(matrix.identifier, 'android-') }}
            steps:
              - name: Install JDK 17
                uses: actions/setup-java@v3
                with:
                  java-version: 17
                  distribution: temurin
              - name: Install Android SDK
                uses: android-actions/setup-android@v3
              - name: Install NDK r23c
                uses: nttld/setup-ndk@v1
                with:
                  ndk-version: r23c
                  link-to-sdk: true
      - name: Install Python and SCons
        uses: actions/setup-python@v2
        run: |
          python -m pip install --upgrade pip
          python -m pip install scons
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up SCons cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.scons-cache/
            ${{ github.workspace }}/**/.sconsign.dblite
            ${{ github.workspace }}/godot-cpp/gen/
          key: ${{ matrix.identifier }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.identifier }}-${{ github.ref }}-
            ${{ matrix.identifier }}-
      - name: Compile extension
        shell: bash
        env:
          SCONS_CACHE: '${{ github.workspace }}/.scons-cache/'
          SCONS_CACHE_LIMIT: 4096
        run: |
          scons target='${{ matrix.target }}' platform='${{ matrix.platform }}' arch='${{ matrix.arch }}' -j2
      - name: Prepare artifacts
        run: |
          BUILD_DIR="${{ github.workspace }}/builds/${{ matrix.identifier }}"
          mkdir -p "$BUILD_DIR"
          cp -r project/addons/* "$BUILD_DIR/"
          cp README.md LICENSE "$BUILD_DIR/"
          cd builds
          zip -r "${{ matrix.identifier }}.zip" "${{ matrix.identifier }}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.identifier }}
          path: "builds/${{ matrix.identifier }}.zip"

  create_release:
    runs-on: ubuntu-22.04
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          path: downloads
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'automated-build-${{ github.run_number }}'
          release_name: 'Automated Build ${{ github.run_number }}'
          draft: false
          prerelease: false
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in downloads/*; do
            echo "Uploading $asset..."
            curl -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Content-Type: application/zip" \
                 --data-binary @"$asset" \
                 "$GITHUB_API_URL/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$(basename $asset)"
          done
